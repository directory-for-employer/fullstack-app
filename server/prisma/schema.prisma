generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement()) 
  email String @unique
  name String?
  password String
  isAdmin Boolean? @default(false)
  favorites UserOnMovie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Genre{
  id Int @id @default(autoincrement())
  slug String @unique
  name String
  icon String
  description String
  movie GenreOnMovie[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Actor {
  id Int @default(autoincrement()) @id
  slug String @unique
  name String
  photo String
  movie ActorOnMovie[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie { 
  id Int @id @default(autoincrement()) 
  years Int
  duration Int
  country String
  slug String @unique
  title String
  poster String
  videoUrl String
  bigPoster String
  description String
  rating Int @default(4)
  countOpened Int? @default(0)
  isSendTelegram Boolean?

  genre GenreOnMovie[]
  actor ActorOnMovie[]
  user UserOnMovie[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GenreOnMovie{
  movie Movie @relation(fields: [movieId], references: [id])
  movieId Int
  genre Genre @relation(fields: [genreId], references: [id])
  genreId Int
  @@id([movieId, genreId])
}

model ActorOnMovie{
  movie Movie @relation(fields: [movieId], references: [id])
  movieId Int
  actor Actor @relation(fields: [actorId], references: [id])
  actorId Int
  @@id([movieId, actorId])
}

model UserOnMovie{
  movie Movie @relation(fields: [movieId], references: [id])
  movieId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  @@id([movieId, userId])
}